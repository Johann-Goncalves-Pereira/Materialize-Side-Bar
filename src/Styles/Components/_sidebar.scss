@use "../Abstracts/" as *;

@mixin pseudo-border($horizontal: left, $vertical: top) {
	$top: 0;
	$bottom: calc(var(--frame-space) - 0px);

	&::before {
		$border: 1px solid var(--clr-surface-400);

		content: "";
		position: absolute;

		width: var(--frame-space);
		aspect-ratio: var(--ratio-square);

		pointer-events: none;

		@if $horizontal == left and $vertical == top {
			left: calc(100% - 1px);
			border-left: $border;
			border-top-left-radius: var(--rounded-lg);
		} @else if $horizontal != left and $vertical == top {
			right: calc(100% - 1px);
			border-right: $border;
			border-top-right-radius: var(--rounded-lg);
		} @else if $horizontal == left and $vertical != top {
			left: calc(100% - 1px);
			border-left: $border;
			border-bottom-left-radius: var(--rounded-lg);
		} @else {
			right: calc(100% - 1px);
			border-right: $border;
			border-bottom-right-radius: var(--rounded-lg);
		}

		@if $vertical == top {
			top: $top;
			border-top: $border;
		} @else {
			bottom: $bottom;
			border-bottom: $border;
		}
	}

	&::after {
		content: "";
		position: absolute;

		width: 40vw;
		height: 1px;

		@if $horizontal == left {
			left: calc(100% + var(--frame-space));

			background-image: linear-gradient(
				90deg,
				var(--clr-surface-400),
				transparent
			);
		} @else {
			right: calc(100% + var(--frame-space));

			background-image: linear-gradient(
				90deg,
				transparent,
				var(--clr-surface-400)
			);
		}

		@if $vertical == top {
			top: $top;
		} @else {
			bottom: $bottom;
		}
	}
}

@mixin border-lines($horizontal: left, $vertical: top) {
	.border-lines {
		$calc-bottom: calc(100% - var(--frame-space) * 2);

		position: absolute;
		inset-block: -1px 0;

		width: 1px;

		background-image: linear-gradient(
			180deg,
			transparent var(--frame-space),
			var(--clr-surface-400) var(--frame-space),
			transparent 50%,
			var(--clr-surface-400) $calc-bottom,
			transparent $calc-bottom
		);

		pointer-events: none;

		@if $horizontal == left {
			left: 100%;

			&__top {
				@include pseudo-border();
			}
			&__bottom {
				@include pseudo-border($vertical: bottom);
			}
		} @else {
			right: 100%;

			&__top {
				@include pseudo-border(right);
			}
			&__bottom {
				@include pseudo-border(right, bottom);
			}
		}
	}
}

[class*="sidebar--"] {
	@include backdrop-blur();

	position: relative;
	top: calc(var(--frame-space) - 2);

	padding-inline: var(--sidebar-padding-x, 0.5rem);

	background-repeat: no-repeat;
	background-size: 1px;
	background-position-x: var(--sidebar-bg-position-x);

	height: calc(100% + var(--frame-space));
}

.sidebar--left {
	@include border-lines();

	--sidebar-bg-position-x: right;
	--sidebar-padding-x: 0;

	.list {
		$padding-y: 0.75rem;

		display: grid;
		gap: 1rem;

		padding-top: calc(var(--frame-space) / 1.25);

		&__item {
		}

		&__button {
			display: grid;
			place-items: center;
			padding: 0.5rem $padding-y;

			.material-symbols-rounded {
				// width: 1rem;
				font-size: 1.25rem;
			}

			&:enter {
				color: var(--clr-brand-400);
			}
		}
	}
}

.sidebar--right {
	@include border-lines(right, bottom);

	.pager {
		--gap_: 0.5rem;

		position: absolute;
		inset-block: 0;
		right: 100%;

		display: grid;
		place-content: center;
		gap: var(--gap_);
		width: var(--frame-space);

		pointer-events: none;

		&__ball {
			cursor: pointer;
		}

		&__ball,
		&__ball:first-child::before {
			width: var(--width_, 8px);
			aspect-ratio: var(--ratio-square);
			border: 2px solid hsl(var(--clr-surface-100-hsl) / var(--alpha_, 0.5));
			border-radius: var(--rounded-full);

			pointer-events: all;
		}

		&__ball:first-child {
			position: relative;

			&::before {
				--width_: 4px;
				--alpha_: 0.9;

				content: "";
				position: absolute;
				top: -2px;
				left: -2px;

				transform: translateY(var(--pager));
				transition: transform 500ms ease-in-out;
				will-change: transform;

				// background-color: hsl(var(--clr-surface-100-hsl) / 0.5);

				cursor: default;
			}
		}
	}
}
